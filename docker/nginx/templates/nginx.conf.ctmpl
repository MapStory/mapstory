user nginx;
worker_processes {{ or (env "NGINX_NUM_WORKERS") "1" }};

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections 1024;
  use epoll;
  multi_accept on;
}

{{ if or (env "NGINX_FILE_CACHE_ENABLED") "False" | parseBool }}
open_file_cache max=1000 inactive=300s;
open_file_cache_valid 60s;
open_file_cache_min_uses 2;
open_file_cache_errors on;
{{ end }}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;


  sendfile on;
  sendfile_max_chunk 10m;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;

  gzip on;
  gzip_proxied any;
  gzip_http_version 1.0;
  gzip_comp_level {{ or (env "NGINX_GZIP_COMP_LEVEL") "4" }};
  gzip_min_length 500;
  gzip_disable msie6;
  gzip_types
#    text/html # already included
    text/css
    application/javascript
    text/javascript
    application/x-javascript
    text/json
    application/json
    text/xml
    application/xml
    application/xml+rss
    application/octet-stream
    application/font-woff
    application/font-woff2
    font/woff
    font/woff2
    application/x-font-ttf
    text/comma-separated-values
    ;

  server {

    listen 80;
    listen [::]:80;
    listen 443 default_server ssl;

    server_name {{ env "PUBLIC_HOST" }};

    ssl_certificate {{ env "SSL_CERT" }};
    ssl_certificate_key {{ env "SSL_KEY" }};
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    
    {{ if or (env "FORCE_HTTPS_REDIRECT") "True" | parseBool }}
    if ($scheme = http) {
      return 301 https://{{ env "PUBLIC_HOST" }}$request_uri;
    }
    {{ end }}

    root /var/www;

    #{% if allowed_hosts is defined %}
    # Deny illegal Host headers
    #if ($host !~* ^({{ env "ALLOWED_HOSTS" }})$ ) {
    #  return 444;
    #}
    #{% endif %}

    # serve staticfiles
    location /static/ {
      alias {{ env "STATIC_ROOT" }}/;
    }

    # serve mediafiles, default 'uploaded' in GeoNode
    location /uploaded/ {
      alias {{ env "MEDIA_ROOT" }}/;
      add_header Cache-Control "max-age: 0, must-revalidate";
      add_header Last-Modified "";
      etag on;
    }

    # geoserver proxy
    location /geoserver/ {
      proxy_pass http://geoserver:8080/geoserver/;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto {{ or (env "PUBLIC_PROTOCOL") "$scheme" }};
      proxy_set_header Host $http_host;
      proxy_redirect off;
    }

    # wsgi proxy
    location / {
      proxy_pass_header Server;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-Proto {{ or (env "PUBLIC_PROTOCOL") "$scheme" }};
      proxy_connect_timeout 90s;
      proxy_read_timeout 90s;
      proxy_pass http://django:8000/;
      client_max_body_size {{ or (env "NGINX_CLIENT_MAX_BODY_SIZE") "500m" }};
    }
  }
}
