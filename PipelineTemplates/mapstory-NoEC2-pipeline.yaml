AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This CloudFormation template will deploy a full CI/CD pipeline for Mapstory. It
    includes docker image building with AWS CodeBuild and application deployment via AWS
    CloudFormation onto an already created EC2 instance. It will create an AWS
    CodePipeline for orchastrating builds, testing and deployments. Use with separate
    configuration file to specific environment parameters.

Parameters:

    ApplicationName:
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'

    TAG:
        Type: String

    ENVIRONMENT:
        Type: String

    ArtifactS3Bucket:
        Description: An existing S3 bucket within this AWS account
        Type: String

    GitHubOAuthToken:
        Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
        Type: String

    GitHubUser:
        Description: Enter GitHub username of the repository owner
        Type: String

    GitHubRepository:
        Description: Enter the repository name that should be monitored for changes
        Type: String

    GitHubBranch:
        Description: Enter the GitHub branch to monitored
        Type: String

    QUAYioUSERNAME:
        Type: String

    QUAYioPASSWORD:
        Type: String

    DeploymentTagKey:
        Type: String

    DeploymentTagValue:
        Type: String

Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Application Configuration
                Parameters:
                    - ApplicationName
                    - ArtifactS3Bucket
            -
                Label:
                    default: GitHub Configuration
                Parameters:
                    - GitHubOAuthToken
                    - GitHubUser
                    - GitHubRepository
                    - GitHubBranch

Resources:

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactS3Bucket
            Stages:
                -
                    Name: Source
                    Actions:
                        -
                            Name: GitHub
                            RunOrder: 1
                            ActionTypeId:
                                Category: Source
                                Owner: ThirdParty
                                Version: 1
                                Provider: GitHub
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Owner: !Ref GitHubUser
                                Repo: !Ref GitHubRepository
                                PollForSourceChanges: 'false'
                                Branch: !Ref GitHubBranch
                                OAuthToken: !Ref GitHubOAuthToken
                        -
                            Name: PipelineArtifact
                            RunOrder: 1
                            ActionTypeId:
                                Category: Source
                                Owner: AWS
                                Version: 1
                                Provider: S3
                            OutputArtifacts:
                                -  Name: mapstory-codedeploy
                            Configuration:
                                S3Bucket: mapstory-pipeline
                                PollForSourceChanges: 'false'
                                S3ObjectKey: mapstory-codedeploy.zip
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration:
                                ProjectName: !Ref CodeBuild
                -
                    Name: Deploy
                    Actions:
                        -
                            Name: Deploy
                            RunOrder: 1
                            InputArtifacts:
                                - Name: mapstory-codedeploy
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: '1'
                                Provider: CodeDeploy
                            Configuration:
                                ApplicationName: !Sub ${ApplicationName}
                                DeploymentGroupName: !Ref DeploymentGroup
    DeploymentGroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
            ApplicationName: !Sub ${ApplicationName}
            Ec2TagFilters:
              -
                Key: !Sub ${DeploymentTagKey}
                Value: !Sub ${DeploymentTagValue}
                Type: KEY_AND_VALUE
            ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
            DeploymentConfigName: CodeDeployDefault.OneAtATime
            AutoRollbackConfiguration:
              Enabled: true
              Events:
              - DEPLOYMENT_FAILURE
            DeploymentStyle:
              DeploymentType: IN_PLACE
              DeploymentOption: WITHOUT_TRAFFIC_CONTROL
    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Cache:
              Type: NO_CACHE
            Environment:
                ComputeType: BUILD_GENERAL1_MEDIUM
                Image: aws/codebuild/docker:18.09.0
                Type: LINUX_CONTAINER
            Artifacts:
                Type: NO_ARTIFACTS
            Source:
                BuildSpec: !Sub |-
                        version: 0.2

                        phases:
                          pre_build:
                            commands:
                              - docker login -u ${QUAYioUSERNAME} -p ${QUAYioPASSWORD} quay.io
                          build:
                            commands:
                              - mkdir -p secrets/postgres
                              - touch secrets/postgres/postgres_secrets
                              - rm -rf mapstory
                              - git clone https://github.com/MapStory/mapstory.git
                              - cd mapstory
                              - git submodule update --recursive --init
                              - docker system prune -a -f
                              - export DCO="docker-compose -f docker-compose.yml -f docker/docker-compose.${ENVIRONMENT}.yml"
                              - export TAG=${TAG}
                              - make build
                          post_build:
                            commands:
                              - $DCO push
                InsecureSsl: false
                Location: https://github.com/MapStory/mapstory
                GitCloneDepth: 1
                Type: GITHUB
                ReportBuildStatus: true
    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}
    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codepipeline.amazonaws.com"
                        }
                    }]
                }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "cloudformation.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [ "*" ],
                                    "Resource": "*"
                            }]
                        }
    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codedeploy.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-CodeDeploy-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }
    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }
Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}

    CodeDeployApplication:
        Description: The CodeDeploy application used across all environments
        Value: !Ref CodeDeployApplication
        Export:
            Name: !Sub CodeDeployApplication-${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}

    WebsiteURL:
        Description: MapStory Website
        Value: !Sub "https://${ENVIRONMENT}.mapstory.org"
