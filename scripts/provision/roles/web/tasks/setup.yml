---
- name: install pycurl package in order to use the apt_repository module
  apt: pkg=python-pycurl state=present
  tags: [install]

- name: add node repo
  apt_repository: repo='ppa:chris-lea/node.js' update_cache=yes
  tags: [install]

- name: add stable nginx ppa
  apt_repository: repo='ppa:nginx/stable' update_cache=yes
  tags: [install]

- name: install geonode deps
  apt: name={{item}} state=present
  with_items:
# these were copied from geonode installation instructions
    - gcc
    - gdal-bin
    - gettext
    - git
    - libgeos-dev
    - libjpeg-dev
    - libpng-dev
    - libpq-dev
    - libproj-dev
    - libxml2-dev
    - libxslt1-dev
    - nodejs
    - patch
    - python-bs4
    - python-dev
    - python-django
    - python-django-extensions
    - python-django-jsonfield
    - python-django-nose
    - python-django-pagination
    - python-django-taggit
    - python-gdal
    - python-httplib2
    - python-imaging
    - python-lxml
    - python-multipartposthandler
    - python-nose
    - python-paver
    - python-pillow
    - python-pip
    - python-psycopg2
    - python-support
    - python-urlgrabber
    - python-virtualenv
    - transifex-client
    - virtualenvwrapper
  tags: [install]

- name: install node tools
  shell: npm install -y -g bower grunt-cli
  tags: [install]

- name: install extra
  apt: name={{item}} state=present
  with_items:
      - python-pastescript
      - virtualenvwrapper
      - gunicorn
      - nginx
      - supervisor
      - ipython
      - memcached
      - unattended-upgrades
  tags: [install]

- name: activate unattended-upgrades
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic line='APT::Periodic::Unattended-Upgrade "1";'
  tags: [install]

- name: add auto upgrades
  lineinfile: dest=/etc/apt/apt.conf.d/20auto-upgrades create=yes line='{{item}}'
  tags: [install]
  with_items:
    - 'APT::Periodic::Update-Package-Lists "1";'
    - 'APT::Periodic::Unattended-Upgrade "1";'

- name: update security packages
  command: unattended-upgrade
  sudo: yes
  tags: [install]

- name: Ensure bash, OpenSSl, and libssl are the latest versions
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=latest
  with_items:
    - bash
    - openssl
    - libssl-dev
    - libssl-doc
  tags: [install]

- name: created application user
  user: name={{ application_user }} groups=www-data
  tags: [config, user]

- name: srv layout
  file: path=/srv/scripts state=directory owner={{ application_user }} group=www-data
  tags: [config, files]

- name: git layout
  file: path=/srv/git state=directory owner={{ application_user }} group=www-data
  tags: [config, files]

- name: create www-data home directory
  file: path=/var/www state=directory mode=0775 owner=www-data group=www-data recurse=true
  tags: [setup]

- name: gunicorn-app
  copy: src=roles/web/files/gunicorn-app.sh dest=/srv/scripts/gunicorn-app.sh mode=650 owner={{ application_user }} group=www-data
  notify: restart django
  tags: [config, files, gunicorn]

- name: supervisor-gunicorn
  copy: src=roles/web/files/supervisor-gunicorn-django.conf dest=/etc/supervisor/conf.d
  notify: [reload supervisor, restart django]
  tags: [config, gunicorn]

- name: supervisor-jetty
  file: path=/etc/supervisor/conf.d/supervisor-jetty.conf state=absent

- name: nginx-conf
  template: src=roles/web/files/nginx.conf dest=/etc/nginx/sites-available/{{ application_name }}
  notify: restart nginx
  tags: [config, nginx]

- name: nginx-mimetype-ttf
  lineinfile: dest=/etc/nginx/mime.types insertbefore="\}" line="application/x-font-ttf ttf;"
  notify: restart nginx
  tags: [config, nginx]

- name: nginx-enable
  file: src=/etc/nginx/sites-available/{{ application_name }} dest=/etc/nginx/sites-enabled/{{ application_name }} state=link
  notify: restart nginx
  tags: [config, nginx]

- name: nginx-disable-default
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  tags: [config, nginx]

- name: django media root
  file: path={{ media_root }} state=directory owner=www-data group=www-data mode=775 recurse=yes
  tags: [nginx]

- name: django uploads
  file: path={{ uploads_root }} state=directory owner=www-data group=www-data mode=775 recurse=yes
  tags: [nginx]



# install apt key
- name: adding elasticsearch gpg key
  apt_key: url=http://packages.elasticsearch.org/GPG-KEY-elasticsearch state=present
  tags: [elasticsearch]

# set dedicated repository
- name: add elasticsearch repository
  apt_repository: repo='deb http://packages.elasticsearch.org/elasticsearch/{{es_version}}/debian stable main' state=present
  tags: [elasticsearch]

# install java if requested
- name: install java version from elasticsearch role
  apt: name={{ es_java_version }} state=present update_cache=yes cache_valid_time=3600
  when: es_install_java
  tags: [elasticsearch]

# install elasticsearch with dependancies
- name: install elasticsearch
  apt: name=elasticsearch state=present update_cache=yes cache_valid_time=3600
  notify: init elasticsearch
  tags: [elasticsearch]

- name: set heap size
  lineinfile: dest=/etc/default/elasticsearch regexp='^ES_HEAP_SIZE' line="ES_HEAP_SIZE={{ es_heap_size }}" state=present
  tags: [elasticsearch]

# this is to workaround known bugs in early versions of elasticsearch in use. 
- name: set pid file to be reachable
  lineinfile: dest=/etc/default/elasticsearch regexp='^PID_DIR' line="PID_DIR=/var/run" state=present
  tags: [elasticsearch]
  
- name: update group gid
  group: name=elasticsearch gid={{ es_gid }} state=present
  when: es_gid
  tags: [elasticsearch]

- name: update user uid and gid
  user: name=elasticsearch uid={{ es_uid }} group=elasticsearch state=present
  when: es_uid
  tags: [elasticsearch]

# set limits.conf
- name: limits.conf tuning
  lineinfile: dest=/etc/security/limits.conf line="{{ item }}"
  tags: elasticsearch
  with_items:
    - 'elasticsearch soft nofile 32000'
    - 'elasticsearch hard nofile 32000'
  tags: [elasticsearch]

- name: only allow access from localhost
  lineinfile: 'dest=/etc/elasticsearch/elasticsearch.yml regexp="^network.bind_host" line="network.bind_host: localhost" state=present'
  tags: [elasticsearch]

- name: disable dynamic scipts
  lineinfile: 'dest=/etc/elasticsearch/elasticsearch.yml regexp="^script.disable_dynamic" line="script.disable_dynamic: true" state=present'
  tags: [elasticsearch]

- name: supervisor-elasticsearch
  copy: src=roles/web/files/supervisor-elasticsearch.conf dest=/etc/supervisor/conf.d
  notify: reload supervisor
  tags: [elasticsearch]

- name: reload supervisor
  shell: /usr/bin/supervisorctl reread && /usr/bin/supervisorctl update
  sudo: yes
  sudo_user: root
  tags: [elasticsearch]

# Install RabbitMQ
- name: Add the RabbitMQ public GPG key to the apt repo
  apt_key: url=http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
           state=present
  tags: [rabbitmq]

- name: Add RabbitMQ to the sources list
  apt_repository: repo='deb http://www.rabbitmq.com/debian/ testing main'
                  update_cache={{ update_apt_cache }}
                  state=present
  tags: [rabbitmq]

- name: Install RabbitMQ server
  apt: name={{ item }} update_cache={{ update_apt_cache }} force=yes state=installed
  with_items:
    - rabbitmq-server
  tags: [rabbitmq]

- name: Enable the RabbitMQ Management Console
  rabbitmq_plugin: names=rabbitmq_management state=enabled
  notify: restart rabbitmq-server
  tags: [rabbitmq]

- name: Create a vhost for the application
  rabbitmq_vhost: name={{ rabbitmq_application_vhost }} state=present
  tags: [rabbitmq]

- name: Create default admin user
  rabbitmq_user: user={{ rabbitmq_admin_user }}
                 password={{ rabbitmq_admin_password }}
                 vhost=/
                 tags=administrator
                 state=present
  tags: [rabbitmq]

- name: Create application user
  rabbitmq_user: user={{ rabbitmq_application_user }}
                 password={{ rabbitmq_application_password }}
                 vhost={{ rabbitmq_application_vhost }}
                 configure_priv=.*
                 read_priv=.*
                 write_priv=.*
                 state=present
  tags: [rabbitmq]

- name: Ensure the default guest user does not exist
  rabbitmq_user: user=guest
                 state=absent
  tags: [rabbitmq]

- name: Ensure that the RabbitMQ service is running
  service: name=rabbitmq-server state=started enabled=yes
  tags: [rabbitmq]

- name: download gdal
  git: repo=https://github.com/OSGeo/gdal.git dest=/srv/gdal update=no

- name: build gdal
  shell: '{{item}}'
  args:
    chdir: /srv/gdal/gdal
  with_items:
    - ./configure --with-python
    - make
    - make install
    - ldconfig
  tags: packages

