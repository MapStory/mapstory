---
- name: ensure known hosts
  shell: mkdir ~/.ssh; touch ~/.ssh/known_hosts
  become_user: '{{ application_user }}'
  tags: [config]


- name: remove github.com from known host
  shell: ssh-keygen -R github.com
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [config]

- name: ensure github.com in known host
  shell: ssh-keyscan -H github.com > ~/.ssh/known_hosts
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [config]

- name: Ensures top directory exists
  file: path={{ top_project }} state=directory group={{ application_user }} owner={{ application_user }} mode=755
  tags: [git]

- name: mapstory checkout
  git: repo=git://github.com/MapStory/mapstory.git dest={{ top_project }}/mapstory force=yes
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [git, update]

#- name: mapstory-maploom checkout
#  git: repo=git://github.com/MapStory/MapLoom.git dest={{ top_project }}/MapLoom force=yes
#  become_user: '{{ application_user }}'
#  when: setup_git_repo is defined and setup_git_repo
#  tags: [git]

- name: geonode checkout
  git: repo=git://github.com/MapStory/geonode.git dest={{ top_project }}/geonode force=yes
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [git, update]

- name: geoserver-geonode-ext checkout
  git: repo=git://github.com/MapStory/geoserver-geonode-ext.git dest={{ top_project }}/geoserver-geonode-ext force=yes
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [git, update]

- name: geotools checkout
  git: repo=git://github.com/MapStory/geotools.git dest={{ top_project }}/geotools force=yes
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [git, update]

- name: clean modified geonode content to prevent submodule update fail
  command: git checkout -- . chdir={{ top_project }}/geonode
  become_user: '{{ application_user }}'
  when: setup_git_repo is defined and setup_git_repo
  tags: [update]

- name: check if virtualenv already exists
  stat: path={{venv}}
  register: venv_dir

- name: create virtualenv
  shell: virtualenv --system-site-packages {{venv}}
  become_user: '{{ application_user }}'
  when: venv_dir.stat.isdir is not defined

- name: pip install
  pip: virtualenv={{venv}} chdir={{ project_path }} requirements=requirements.txt
  become_user: '{{ application_user }}'
  tags: [update, debug]

- name: configure media root
  file: path={{ media_root }} owner=www-data group=www-data mode=0775 state=directory
  become_user: '{{ application_user }}'
  tags: [setup, media]

- name: compile python
  shell: '{{ venv }}/bin/python -m compileall -f {{ top_project }}/geonode -f {{ project_path }}'
  become_user: '{{ application_user }}'
  tags: [update]
  notify: restart django
  when: env != 'vagrant'

- name: generate django secret key
  shell: python -c 'import random;print "".join(random.sample("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)",50))'
  become_user: '{{ application_user }}'
  register: secret_key
  tags: [settings]

- name: write secret key
  template: src=roles/web/files/local_key.py dest=/tmp/local_key.py
  become_user: '{{ application_user }}'
  tags: [settings]
#  notify: restart django

- name: mv project local settings across synced file system if necessary
  command: mv /tmp/local_key.py {{ project_path }}/{{ project_name }}/settings/local_key.py
  become_user: '{{ application_user }}'
  notify: restart django
  tags: [settings]

- name: write project local settings - sync filesystem safe
  template: src=roles/web/files/local_settings.py.j2 dest=/tmp/local_settings.py
  become_user: '{{ application_user }}'
  tags: [settings]


- name: mv project local settings across synced file system if necessary
  command: mv /tmp/local_settings.py {{ project_path }}/{{ project_name }}/settings/local_settings.py
  become_user: '{{ application_user }}'
  notify: restart django
  tags: [settings]

- name: Make sure manage.py is directly runnable (ansible > 2.0)
  file: path={{ project_path }}/manage.py group={{ application_user }} owner={{ application_user }} mode=755
  tags: [migrate, manage, syncdb]

- name: migrate maps
  django_manage: command="migrate maps --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [migrate, update, syncdb]

- name: migrate journal
  django_manage: command="migrate journal --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [migrate, update, syncdb]

- name: migrate layers
  django_manage: command="migrate layers --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [update, syncdb]

- name: migrate groups
  django_manage: command="migrate groups --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [update, syncdb]

- name: migrate
  django_manage: command="migrate --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [update, syncdb]

- name: syncdb
  django_manage: command="syncdb --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become_user: '{{ application_user }}'
  tags: [update, syncdb]

- name: load initial data
  django_manage: app_path={{ project_path }} virtualenv={{ venv }} fixtures='{{ fixtures }}' command=loaddata
  become_user: '{{ application_user }}'
  tags: [settings, initial_data]


- name: create or update django super user
  become_user: '{{ application_user }}'
  shell: >
    PYTHONPATH=. DJANGO_SETTINGS_MODULE={{ application_name }}.settings
    {{ venv }}/bin/python -c
    "import django; from geonode.people.models import Profile; django.setup(); p,_ = Profile.objects.get_or_create(username='admin'); p.is_staff=p.is_superuser=True; p.set_password('{{django_su_pass}}'); p.save()"
    chdir={{ project_path }}
  tags: [superuser]

- name: collect-static remote
  shell: . {{ venv_activate }}
         && cd {{ project_path }}
         && python manage.py collectstatic --noinput --ignore node_modules
  become_user: '{{ application_user }}'
  when: use_aws_s3 is defined and use_aws_s3
  tags: [update, reload]

- name: geonode npm install
  shell: npm install
  args:
    chdir: '{{ top_project }}/geonode/geonode/static/'
  become_user: '{{ application_user }}'
  tags: [update]

- name: geonode bower install
  shell: bower install
  args:
    chdir: '{{ top_project }}/geonode/geonode/static/'
  become_user: '{{ application_user }}'
  tags: [update]

- name: geonode grunt copy
  shell: grunt copy
  args:
    chdir: '{{ top_project }}/geonode/geonode/static/'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory npm install
  shell: npm install
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory bower install
  shell: bower install
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory grunt concat
  shell: grunt concat
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory grunt less
  shell: grunt less:development
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory grunt copy
  shell: grunt copy:development
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: mapstory bower update
  shell: bower update
  args:
    chdir: '{{ project_path }}/mapstory/static'
  become_user: '{{ application_user }}'
  tags: [update]

- name: collect-static local
  django_manage: app_path={{ project_path }} virtualenv={{ venv }} command='collectstatic --link --noinput --ignore node_modules'
  become_user: '{{ application_user }}'
  when: use_aws_s3 is undefined or use_aws_s3 == False
  tags: [update, reload]
  ignore_errors: True
  tags: [update]

- name: reload indexes
  django_manage: app_path={{ project_path }} virtualenv={{ venv }} command='rebuild_index --noinput'
  become_user: '{{ application_user }}'
  tags: [elasticsearch]
  ignore_errors: True

- name: create temp folder for icons
  file: state=directory path=/tmp/{{ application_name }} owner={{ application_user }}

- name: restart nginx
  shell: 'sudo service nginx restart'
