/rest/process/batchdownload/download/*;GET=IS_AUTHENTICATED_ANONYMOUSLY

# the following are allowed so that clients have a way to find out if a particular layer is
# backed by geogig. Ideally, we would like the getCapabilities request include a metadata
# specifying the geogig endpoint corresponding to a layer so that we don't need the rest endpoint.
# Note that only the __specific__ rest endpoint that are actually needed are exposed to ROLE_ANONYMOUS
# and IS_AUTHENTICATED_ANONYMOUSLY (which includes both authenticated admin and non-admin). An
# edge case to keep in mind is that a remote server might want to expose a geogig layer publically and
# allow anyone to edit its data anonymously or logged in. making sure the needed rest endpoints are
# accessible by ROLE_ANONYMOUS will allow such layer. otherwise, they would still be asked to
# authenticate on a remote for which they do not have any credentials.
/rest/layers/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY
/rest/workspaces/*/datastores/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY
/rest/workspaces/*/datastores/*/featuretypes/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY

/geogig/*/repo/manifest;GET=IS_AUTHENTICATED_ANONYMOUSLY
/geogig/*/repo/**;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/push;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/pull;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/updateref;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/remote;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/fetch;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/merge;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/add;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/remove;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR
/geogig/*/resolveconflict;GET,POST,DELETE,PUT=ROLE_ADMINISTRATOR

# close the root geogig endpoint to non-admins.
/geogig**;GET,POST,DELETE,PUT=IS_AUTHENTICATED_ANONYMOUSLY
/geogig/**;GET,POST,DELETE,PUT=IS_AUTHENTICATED_ANONYMOUSLY

/**;GET=ROLE_ADMINISTRATOR
/**;POST,DELETE,PUT=ROLE_ADMINISTRATOR
